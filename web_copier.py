
import base64
import hashlib
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

# Data terenkripsi (gabungan IV dan ciphertext)
encrypted_data = """"""

def decrypt_and_execute(key):
    # Decode data terenkripsi dari Base64
    encrypted_bytes = base64.b64decode(encrypted_data)
    
    # Pisahkan IV dan ciphertext
    iv = encrypted_bytes[:16]
    ciphertext = encrypted_bytes[16:]
    
    # Hash kunci menggunakan SHA-256
    hashed_key = hashlib.sha256(key.encode()).digest()
    
    # Dekripsi menggunakan AES
    cipher = AES.new(hashed_key, AES.MODE_CBC, iv)
    decrypted_content = unpad(cipher.decrypt(ciphertext), AES.block_size).decode()
    
    # Eksekusi hasil dekripsi
    exec(decrypted_content, globals())

# Jalankan dekripsi dan eksekusi
decrypt_and_execute("kamu.py")
