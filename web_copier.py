
import os
import base64
import marshal
from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Util.Padding import pad, unpad

# Fungsi untuk membuat kunci AES dari password
def create_key(password: str, salt: bytes) -> bytes:
    return PBKDF2(password, salt, dkLen=32, count=1000000)

# Fungsi untuk mendeteksi apakah file telah diganti nama
def detect_file_rename(file_name):
    return os.path.exists(file_name)

# Fungsi untuk mendekripsi data terenkripsi
def decrypt_data(encrypted_data: str, password: str):
    encrypted_data = base64.b64decode(encrypted_data)

    salt = encrypted_data[:16]
    iv = encrypted_data[16:32]
    ciphertext = encrypted_data[32:]

    key = create_key(password, salt)

    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted_data = unpad(cipher.decrypt(ciphertext), AES.block_size)

    return marshal.loads(decrypted_data)

#yameteh
password = 'super_secure_password'
encrypted_code = """"""
decrypted_code = decrypt_data(encrypted_code, password)
exec(decrypted_code)
        
